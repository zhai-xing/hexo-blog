<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhai-xing.github.io/hexo-blog</id>
    <title>Mo Bai</title>
    <link href="https://zhai-xing.github.io/hexo-blog" />
    <updated>2023-09-05T14:57:10.000Z</updated>
    <category term="原理" />
    <category term="学习笔记" />
    <entry>
        <id>https://zhai-xing.github.io/hexo-blog/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</id>
        <title>Redis学习笔记</title>
        <link rel="alternate" href="https://zhai-xing.github.io/hexo-blog/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
        <content type="html">&lt;h1 id=&#34;一-redis数据类型篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-redis数据类型篇&#34;&gt;#&lt;/a&gt; 一、redis 数据类型篇&lt;/h1&gt;
&lt;p&gt;rdis 常见的数据类型及应用场景&lt;/p&gt;
&lt;h4 id=&#34;string&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#string&#34;&gt;#&lt;/a&gt; String&lt;/h4&gt;
&lt;p&gt;String 是最基本的 key-value 结构，key 是唯一标识 value 是具体的值 value 不仅是字符串，还可以是数字 (整数或者浮点数) value 最多可以容纳的数据长度是 512M，&lt;/p&gt;
&lt;h5 id=&#34;内部实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部实现&#34;&gt;#&lt;/a&gt; 内部实现：&lt;/h5&gt;
&lt;p&gt;String 底层实现的数据结构是 int 和 SDS (简单动态字符串)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDS 不仅可以保存文本数据还可以保存二进制数据，SDS 使用了 len 属性来判断字符串是否结束，&lt;/li&gt;
&lt;li&gt;SDS 获取字符串长度的时间复杂度是 O1&lt;/li&gt;
&lt;li&gt;Redis 的 SDS api 是安全的，拼接字符前会判断空间是否满足要求，不满足会自动扩容，所以不好导致缓冲区溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;常用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用场景&#34;&gt;#&lt;/a&gt; 常用场景：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;常规计数：计算点赞、转发、库存数量、阅读量&lt;/li&gt;
&lt;li&gt;分布式： 使用命令不存在此键就插入成功，而解锁 就是删除键，解锁的额操作需要判断，使用需要保证原子性操作，可以使用 Lua 脚本&lt;/li&gt;
&lt;li&gt;共享 Session 使用 Session 来保存用户的会话状态。&lt;/li&gt;
&lt;li&gt;热点数据缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;list&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt; List&lt;/h4&gt;
&lt;p&gt;list 是简单的字符串列表，按照插入顺序排序，可以从头部或尾部向 List 添加元素，列最大长度为 2^32-1&lt;/p&gt;
&lt;h5 id=&#34;内部实现-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部实现-2&#34;&gt;#&lt;/a&gt; 内部实现&lt;/h5&gt;
&lt;p&gt;在 3.2 版本之前内部是采用双向链表或者压缩列表实现的，在后面就只用 quicklist 实现，替代了双向链表和压缩列表&lt;/p&gt;
&lt;h5 id=&#34;常用场景-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用场景-2&#34;&gt;#&lt;/a&gt; 常用场景&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;消息队列 ：如果要实现消息队列，需要实现消息的保序、可靠、处理重复的消息&lt;br&gt;
保序的话，List 本身就是先进先出，已经是有序的了，并且 redis 提供了 BRPOP 命令，称为阻塞式读取，客户端在没有读到 redis 数据时自动阻塞，直到有数据了在读取。 处理重复消息，需要自己生成一个全局 ID，需要记录已经处理过的消息 ID. 而在消息可靠性方面，redis 在用户读取消息后就不会保存，若消费者消费失败消息就丢失了， 对于这个问题，可以再开一个消息队列，作为备份暂存，消费成功后再去删除掉备份的即可。&lt;br&gt;
存在的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;无法支持消费者组&lt;/li&gt;
&lt;li&gt;无法支持多个消费者消费同一个消息&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;hash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hash&#34;&gt;#&lt;/a&gt; Hash&lt;/h4&gt;
&lt;p&gt;Hash 是一个键值对集合，其中 value=[{field1,value1},{fieldN,valueN}]&lt;/p&gt;
&lt;h5 id=&#34;内部实现-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部实现-3&#34;&gt;#&lt;/a&gt; 内部实现&lt;/h5&gt;
&lt;p&gt;hash 类型的底层数据结构采用的是压缩列表或哈希表 。如果 hash 类型的元素格式小于 512 个 并且值小于 64 字节， 就使用压缩列表，反之则使用 hash 表 而在 redis7.0 中，压缩列表数据结构被废弃了，就采用 listpack 来实现&lt;/p&gt;
&lt;h5 id=&#34;使用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用场景&#34;&gt;#&lt;/a&gt; 使用场景&lt;/h5&gt;
&lt;p&gt;通常用来缓存一些对象的属性，例如用户信息、购物车（用户 Id，商品 id，数量）&lt;/p&gt;
&lt;h4 id=&#34;set&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt; Set&lt;/h4&gt;
&lt;p&gt;set 类型是无序唯一的键值集合，他的存储顺序不会按照插入的先后来存储，一个集合最多可存储 2^32-1 个元素，可以进行并交差集运算，也可以支持多个集合去交集、并集、差集。&lt;/p&gt;
&lt;h5 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;Set 类型比较适合用来做数据去重和保障数据的唯一性，还可以用来统计多个集合的交集、并集、补集，当我们存储的数据是无序且需要去重的情况下，比较适合使用集合类型来存储。需要注意 set 的集合计算复杂度较高，在数据量大的情况下，直接执行这些计算会导致 Redis 实例阻塞，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点赞记录：一个用户只能对一篇文章点赞&lt;/li&gt;
&lt;li&gt;共同关注 ：交集&lt;/li&gt;
&lt;li&gt;抽奖活动：防止重复中奖&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;zset&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#zset&#34;&gt;#&lt;/a&gt; Zset&lt;/h4&gt;
&lt;p&gt;zset 相比较与 set 类型多了一个排序属性，score 分值。对于有序集合 zset 每个存储元素相当于是有两个值组成，一个是有序集合的元素值，一个是排序值，&lt;/p&gt;
&lt;h5 id=&#34;内部实现-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内部实现-4&#34;&gt;#&lt;/a&gt; 内部实现&lt;/h5&gt;
&lt;p&gt;内部采用了压缩列表或跳表实现的，若有有序集合元素个数小于 128 个。并且每个元素值小于 64 字节。redis 会使用压缩列表，否则则使用跳表。在 redis7.0 中跳表废弃了使用了 listpack 数据结构来实现&lt;/p&gt;
&lt;h5 id=&#34;应用场景-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用场景-2&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h5&gt;
&lt;p&gt;排行榜、电话姓名、有序排列&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;高级数据类型&lt;/p&gt;
&lt;h4 id=&#34;bitmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bitmap&#34;&gt;#&lt;/a&gt; BitMap&lt;/h4&gt;
&lt;p&gt;位图，是一串连续的二进制数组 [0,1] 可以通过 offset 定位元素，BitMap 通过最小的单位 bit 来进行 0|1 的设置，表示某个元素的值或状态，时间复杂度为 O1,&lt;/p&gt;
&lt;p&gt;内部实现：本身利用了 String 作为底层数据结构，String 会保存为二进制的字节数组，redis 就把每个 bit 位利用起来，用来表示一个元素的二进制状态。&lt;/p&gt;
&lt;p&gt;应用场景：&lt;br&gt;
签到打卡，判断用户登录状态 连续前端用户数，&lt;/p&gt;
&lt;h4 id=&#34;hyperloglog&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hyperloglog&#34;&gt;#&lt;/a&gt; HyperLogLog&lt;/h4&gt;
&lt;p&gt;是一种用于统计基数的数据集合类型，基数统计是指统计一个集合中不重复元素个数， HyperLoglog 的统计规则是基于概率完成的，不是非常准确，而 HyperLogLog 的优点在于，输入元素的数量或体积很大时，计算基数所需要的内存空间是固定且很小的。&lt;br&gt;
应用场景： 百万级 UV 网页计数&lt;/p&gt;
&lt;h4 id=&#34;geo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#geo&#34;&gt;#&lt;/a&gt; GEO&lt;/h4&gt;
&lt;p&gt;这个是用于存储地理位置信息的，并可以对存储的信息进行计算操作，例如搜索附近的餐馆，打车等等。&lt;br&gt;
内部原理：&lt;br&gt;
底层采用了 Sorted Set 集合类型，GEO 类型使用了 GOEhash 编码方法实现了经纬度到 sorted set 中元素权重分数的转换，其中的两个关键机制计算对二维地图做区间划分和对区间进行编码。一组经纬度落在某个区间后，就用区间的编码值来标识。&lt;/p&gt;
&lt;h4 id=&#34;stream&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream&#34;&gt;#&lt;/a&gt; Stream&lt;/h4&gt;
&lt;p&gt;redis5. 新增的消息队列数据类型，用于完美地实现消息队列，它支持消息的持久化、支持自动生成全局唯一 ID、支持 ack 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息保序：XADD/XREAD&lt;/li&gt;
&lt;li&gt;阻塞读取：XREAD block&lt;/li&gt;
&lt;li&gt;重复消息处理：Stream 在使用 XADD 命令，会自动生成全局唯一 ID；&lt;/li&gt;
&lt;li&gt;消息可靠性：内部使用 PENDING List 自动保存消息，使用 XPENDING 命令查看消费组已经读取但是未被确认的消息，消费者使用 XACK 确认消息；&lt;/li&gt;
&lt;li&gt;支持消费组形式消费数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二-redis数据结构篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-redis数据结构篇&#34;&gt;#&lt;/a&gt; 二、Redis 数据结构篇&lt;/h1&gt;
&lt;p&gt;redis 本身就是一个键值型的数据结构&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225928934.png&#34; alt=&#34;image-20230905225928934&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向 dict 结构的指针。&lt;/li&gt;
&lt;li&gt;dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用哈希表 1，哈希表 2 再 rehash 的时候才会使用&lt;/li&gt;
&lt;li&gt;dictht 结构表示哈希表的结构，结构体存放了哈希表数组，每个数组都指向应该哈希表节点的结构体指针 dictEntry 结构，表示哈希表节点的结构，结构里存放了 **void * key 和 void * value 指针， key 指向的是 String 对象，而 value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225939660.png&#34; alt=&#34;image-20230905225939660&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sds&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sds&#34;&gt;#&lt;/a&gt; SDS&lt;/h3&gt;
&lt;p&gt;redis 是使用 C 语言实现的，但是他没有直接使用 C 语言的 char* 字符数组，而是自己封装了一个名为简单动态字符串的数据结构，来表示字符串， 也就是 SDS&lt;br&gt;
 不使用 c 语言的默认字符数组是因为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C 语言默认的字符数组是以 \0 表示结束的，在二进制数据中经常有 \0 这样的数据串，使用就不能保存&lt;/li&gt;
&lt;li&gt;C 语言的字符串是不会记录自身的缓冲区大小的。容易发生溢出&lt;/li&gt;
&lt;li&gt;字符串操作函数不高效且不安全，比如有缓冲区溢出的风险，有可能会造成程序运行终止&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225948684.png&#34; alt=&#34;image-20230905225948684&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;SDS 的自动扩容机制 如果所需要的长度小于 1mb 。那么是翻倍扩容，如果超过 1Mb 是按照 newlen=1mb&lt;/li&gt;
&lt;li&gt;flags，用来表示不同类型的 SDS。一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64，这 5 种类型的主要区别就在于，它们数据结构中的 len 和 alloc 成员变量的数据类型不同。
&lt;ul&gt;
&lt;li&gt;sdshdr16 类型的 len 和 alloc 的数据类型都是 uint16_t，表示字符数组长度和分配空间大小不能超过 2 的 16 次方。&lt;/li&gt;
&lt;li&gt;sdshdr32 则都是 uint32_t，表示表示字符数组长度和分配空间大小不能超过 2 的 32 次方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链表&#34;&gt;#&lt;/a&gt; 链表&lt;/h3&gt;
&lt;p&gt;redis 的链表结构很简单，就前置节点，后置节点，数据；但是封装了一个 List 数据结构&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;typedef struct list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //链表头节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listNode *head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //链表尾节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listNode *tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //节点值复制函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void *(*dup)(void *ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //节点值释放函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void (*free)(void *ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //节点值比较函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int (*match)(void *ptr, void *key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //链表节点数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unsigned long len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; list;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230013442.png&#34; alt=&#34;image-20230905230013442&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ListNode 链表节点的结构里设置有 prev 和 next，获取某个节点的前置节点或后置节点的时间复杂度只需要 O (1)；&lt;/li&gt;
&lt;li&gt;listl 因为有表头指针和标为指针，所以获取表头和表尾节点的时间复杂度是 O (1)&lt;/li&gt;
&lt;li&gt;list 结构因为提供了链表节点数量 len，所以获取链表中的节点数量的时间复杂度只需 O (1)；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;压缩列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#压缩列表&#34;&gt;#&lt;/a&gt; 压缩列表&lt;/h3&gt;
&lt;p&gt;压缩列表的最大特点就是他被设计成一种内存紧凑型的数据结构，占用的是一块连续的内存空间，不仅可以利用 CPU 缓存，而且可以针对不同的长度的数据进行相应编码，这种方式可以有效的节省内存开销。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230025692.png&#34; alt=&#34;image-20230905230025692&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zlbytes 记录整个压缩列表占用内存对内存字节数&lt;/li&gt;
&lt;li&gt;zltail 记录压缩列表尾部节点距离起始地址由多少字节，也就是列尾偏移量，&lt;/li&gt;
&lt;li&gt;zllen：记录压缩列表包含的节点数量&lt;/li&gt;
&lt;li&gt;zlend: 标记压缩列表的结束点 1&lt;/li&gt;
&lt;li&gt;压缩列表查找表头和表尾元素很快，只需要 O (1) 但是查找其他元素就没那么快了，因此压缩列表不适合保存过多元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哈希表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希表&#34;&gt;#&lt;/a&gt; 哈希表&lt;/h3&gt;
&lt;p&gt;哈希表是一种保存键值对（key-value）的数据结构。&lt;br&gt;
哈希表中的每一个 key 都是独一无二的，程序可以根据 key 查找到与之关联的 value，或者通过 key 来更新 value，又或者根据 key 来删除整个 key-value 等等。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230038715.png&#34; alt=&#34;image-20230905230038715&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis 采用了链式哈希的方式来解决冲突，&lt;/li&gt;
&lt;li&gt;不过，链式哈希局限性也很明显，随着链表长度的增加，在查询这一位置上的数据的耗时就会增加，毕竟链表的查询的时间复杂度是 O (n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着链表越来越长，hash 的查找速度也就会降低，redis 这里提供了 rehash 也就是上面提到的。&lt;/p&gt;
&lt;h4 id=&#34;rehash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rehash&#34;&gt;#&lt;/a&gt; rehash&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230048637.png&#34; alt=&#34;image-20230905230048637&#34;&gt;&lt;br&gt;
 其实整个备份就是来做数据迁移了，节点太多 hash 桶太少，需要扩容&lt;br&gt;
 - 随着数据逐步增多，触发了 rehash 操作，这个过程分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给「哈希表 2」 分配空间，一般会比「哈希表 1」 大 2 倍；&lt;/li&gt;
&lt;li&gt;将「哈希表 1 」的数据迁移到「哈希表 2」 中；&lt;/li&gt;
&lt;li&gt;迁移完成后，「哈希表 1 」的空间会被释放，并把「哈希表 2」 设置为「哈希表 1」，然后在「哈希表 2」 新创建一个空白的哈希表，为下次 rehash 做准备&lt;/li&gt;
&lt;li&gt;为了避免在 rehash 在数据迁移是，因为拷贝数据导致 redis 性能下降，所以都是采用的渐进式 hash，迁移工作是分多次完成，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;触发 rehash 时机：&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230059484.png&#34; alt=&#34;image-20230905230059484&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当负载因子大于等于 1 ，并且 Redis 没有在执行 bgsave 命令或者 bgrewiteaof 命令，也就是没有执行 RDB 快照或没有进行 AOF 重写的时候，就会进行 rehash 操作。&lt;/li&gt;
&lt;li&gt;当负载因子大于等于 5 时，此时说明哈希冲突非常严重了，不管有没有有在执行 RDB 快照或 AOF 重写，都会强制进行 rehash 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;整数集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整数集合&#34;&gt;#&lt;/a&gt; 整数集合&lt;/h3&gt;
&lt;p&gt;整数集合是 Set 对象的底层实现之一，当一个 Set 对象只包含整数值元素，并且元素数量不大时，就用整数集这个数据结构作为底层实现之一，整数集合本质上是一块连续的内存空间吗，整数集合会有一个升级规则，就是当我们将一个新元素加入到整数集合里面，如果新元素的类型（int32_t）比整数集合现有所有元素的类型（int16_t）都要长时，整数集合需要先进行升级，也就是按新元素的类型（int32_t）扩展 contents 数组的空间大小，然后才能将新元素加入到整数集合里，当然升级的过程中，也要维持整数集合的有序性&lt;/p&gt;
&lt;h3 id=&#34;跳表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳表&#34;&gt;#&lt;/a&gt; 跳表&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230108527.png&#34; alt=&#34;image-20230905230108527&#34;&gt;&lt;br&gt;
 链表在查找元素的时候，因为需要逐一查找，所以查找效率非常低下，时间复杂度是 O (n) ，跳表是链表的改进版&lt;br&gt;
，多层有序链表，redis 中只有 Zset 用到了跳表，，个人感觉应该是基于链表的二分查找，redis 为什么使用跳表，而不使用红黑树来实现有序集合。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序集合主要是有增、删、改、查四个操作，这些操作红黑树和跳表时间复杂度都是一样的&lt;/li&gt;
&lt;li&gt;但是基于区间的查询，红黑树的效率就太低了，所以使用跳表&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;quicklist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#quicklist&#34;&gt;#&lt;/a&gt; quickList&lt;/h3&gt;
&lt;p&gt;quicklist 其实是双向链表和压缩列表的组合，一个 quicklist 就是一个链表，而链表中每个元素又是一个压缩列表，&lt;br&gt;
压缩列表的不足，如果保存的元素太多，或者元素变大，压缩列表会有连锁更新的情况，quicklist 解决办法，通过控制每个链表节点中的压缩列表的大小或者元素个数，来规避连锁更新的问题。因为压缩列表元素越少或越小，连锁更新带来的影响就越小，从而提供了更好的访问性能。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230119103.png&#34; alt=&#34;image-20230905230119103&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;listpack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#listpack&#34;&gt;#&lt;/a&gt; listpack&lt;/h3&gt;
&lt;p&gt;是为了解决压缩列表出现的连锁更新问题，目的是替代压缩列表，它最大特点是 listpack 中每个节点不再包含前一个节点的长度了，压缩列表每个节点正因为需要保存前一个节点的长度字段，就会有连锁更新的隐患&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230130155.png&#34; alt=&#34;image-20230905230130155&#34;&gt;&lt;br&gt;
listpack 没有压缩列表中记录前一个节点长度的字段了，listpack 只记录当前节点的长度，当我们向 listpack 加入一个新元素的时候，不会影响其他节点的长度字段的变化，从而避免了压缩列表的连锁更新问题。&lt;/p&gt;
&lt;h1 id=&#34;三-reids-持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-reids-持久化&#34;&gt;#&lt;/a&gt; 三、Reids 持久化&lt;/h1&gt;
&lt;h2 id=&#34;aof持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof持久化&#34;&gt;#&lt;/a&gt; AOF 持久化&lt;/h2&gt;
&lt;p&gt;redis 每执行一条写操作，就把该命令，以追加的方式写入到一个文件，然后后重启 redis 时，先去读这个这个文件里的命令并执行&lt;br&gt;
配置文件中开启&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;appendonly yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;appendfilename &amp;quot;appendonly.aof&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230142284.png&#34; alt=&#34;image-20230905230142284&#34;&gt;&lt;br&gt;
 写入数据到数据库和写 aof 日志都是在主进程中完成的，有一定性能损失。当然 redis 也提供了其他的写回机制，可以配置，在 redis .conf 中配置 appendfsync&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always，这个单词的意思是「总是」，所以它的意思是每次写操作命令执行完后，同步将 AOF 日志数据写回硬盘；&lt;/li&gt;
&lt;li&gt;Everysec，这个单词的意思是「每秒」，所以它的意思是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后每隔一秒将缓冲区里的内容写回到硬盘；&lt;/li&gt;
&lt;li&gt;No，意味着不由 Redis 控制写回硬盘的时机，转交给操作系统控制写回的时机，也就是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，再由操作系统决定何时将缓冲区内容写回硬盘。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230149806.png&#34; alt=&#34;image-20230905230149806&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;aof重写机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof重写机制&#34;&gt;#&lt;/a&gt; AOF 重写机制&lt;/h4&gt;
&lt;p&gt;AOF 日志是一个文件，随着执行的写操作命令越来越多，文件的大小会越来越大。Redis 为了避免 AOF 文件越写越大，提供了 AOF 重写机制，当 AOF 文件的大小超过所设定的阈值后，Redis 就会启用 AOF 重写机制，来压缩 AOF 文件。&lt;br&gt;
redis 的重写机制是在后方子进程 bgrewriteaof 来完成的，&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230157631.png&#34; alt=&#34;image-20230905230157631&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;rdb持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb持久化&#34;&gt;#&lt;/a&gt; RDB 持久化&lt;/h2&gt;
&lt;p&gt;RDB 是内存快照，就是记录一个瞬间的东西，记录的是实时数据，与 AOF 不同，AOF 记录的是命令操作日志，而不是实际的数据。在回复数据时，RDB 要快一些，只需要将 RDB 文件读入内存就可以了，不需要像 AOF 一样还需要执行额外的操作命令。&lt;/p&gt;
&lt;h3 id=&#34;如何生成rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何生成rdb&#34;&gt;#&lt;/a&gt; 如何生成 RDB&lt;/h3&gt;
&lt;p&gt;redis 提供了两个命令，分别是 save 和 bgsave，执行了 save 命令会在主线程上生成 rdb 文件，如果写入 rdb 文件太多会阻塞主线程。执行 bgsave 是创建了一个进程来生成 rdb 文件，这样可以避免主线程阻塞。&lt;br&gt;
也可以通过配置文件的选项，每隔一段时间自动执行 bgsave 命令，因为 RDB 快照是全量快照的方式，因此执行的频率不能太频繁，否则会影响 Redis 性能，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行快照是 redis 的数据是可以继续呗修改的，因为采用了写时复制技术，&lt;br&gt;
执行 bgsave 命令的时候，会通过 fork () 创建子进程，此时子进程和父进程是共享同一片内存数据的，因为创建  子进程的时候，会复制父进程的页表，但是页表指向的物理内存还是一个。共享的内存当另一部分被用户修改时，因为采用了写时复制，所以做复制功能的线程也会被同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;混合持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#混合持久化&#34;&gt;#&lt;/a&gt; 混合持久化&lt;/h2&gt;
&lt;p&gt;尽管 RDB 比 AOF 的数据恢复速度快，但是快照的频率不好把握：&lt;/p&gt;
&lt;p&gt;如果频率太低，两次快照间一旦服务器发生宕机，就可能会比较多的数据丢失；&lt;br&gt;
如果频率太高，频繁写入磁盘和创建子进程会带来额外的性能开销。&lt;br&gt;
这是 redis4.0 提出来的，在配置文件中开启&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;aof-use-rdb-preamble yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当开启了混合持久化时，在 AOF 重写日志时，fork 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程处理的操作命令会被记录在重写缓冲区里，重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。&lt;/p&gt;
&lt;h1 id=&#34;功能篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#功能篇&#34;&gt;#&lt;/a&gt; 功能篇&lt;/h1&gt;
&lt;h3 id=&#34;过期删除策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过期删除策略&#34;&gt;#&lt;/a&gt; 过期删除策略&lt;/h3&gt;
&lt;h5 id=&#34;定时删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定时删除&#34;&gt;#&lt;/a&gt; 定时删除&lt;/h5&gt;
&lt;p&gt;在设置 key 的过期时间时，同时创建一个定时事件，当到达时，由事件处理器执行 key 的删除操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：内存可以被尽快地释放。定时删除对内存是最友好的。&lt;/li&gt;
&lt;li&gt;缺点：定时删除策略对 CPU 不友好，删除过期 key 可能会占用相当一部分 CPU 时间，CPU 紧张的情况下将 CPU 用于删除和当前任务无关的过期键上，会对服务器的响应时间和吞吐量造成影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;惰性删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#惰性删除&#34;&gt;#&lt;/a&gt; 惰性删除&lt;/h5&gt;
&lt;p&gt;不主动删除过期健，每次从数据库访问 key 时检查是否过期，过期则删除，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：只会使用很少的系统资源，对 CPU 最友好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：如果一个 key 已经过期，而这个 key 又仍然保留在数据库中，那么只要这个过期 key 一直没有被访问，它所占用的内存就不会释放。惰性删除策略对内存不友好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;定期删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定期删除&#34;&gt;#&lt;/a&gt; 定期删除&lt;/h5&gt;
&lt;p&gt;每隔段时间随机从数据库中取出一定数量的 key 进行检查，并删除其中过期的 key&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：限制删除操作执行的时长和频率来减少删除操作对 CPU 的影响，同时也能删除一部分过期的数据减少了过期键对空间的无效占用。&lt;/li&gt;
&lt;li&gt;缺点：内存清理方面没有定时删除效果好，同时没有惰性删除使用的系统资源少。难以确定删除操作执行的时长和频率&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;定期删除惰性删除配合使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定期删除惰性删除配合使用&#34;&gt;#&lt;/a&gt; 定期删除 + 惰性删除配合使用&lt;/h5&gt;
&lt;p&gt;redis 选择的时惰性删除 + 定期删除，配合使用，&lt;br&gt;
Redis 在访问或者修改 key 之前，都会调用 expireIfNeeded 函数对其进行检查，检查 key 是否过期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果过期，则删除该 key，然后返回 null 客户端；&lt;/li&gt;
&lt;li&gt;如果没有过期，不做任何处理，然后返回正常的键值对给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从过期字典中随机抽取 20 个 key；检查这 20 个 key 是否过期，并删除已过期的 key；已过期 key 的数量占比随机抽取 key 的数量大于 25%，则继续重复步骤直到比重小于 25%。&lt;/p&gt;
&lt;h3 id=&#34;redis-事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-事务&#34;&gt;#&lt;/a&gt; redis 事务&lt;/h3&gt;
&lt;p&gt;严格来说 redis 事务只是个批处理，有隔离性但是没有原子性&lt;br&gt;
 Multi：开启事务&lt;br&gt;
 Exec：执行&lt;br&gt;
 Discard: 不执行&lt;br&gt;
 redis 和 lus 脚本可以进行整合 (用到再学)&lt;/p&gt;
&lt;h3 id=&#34;redis的持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis的持久化&#34;&gt;#&lt;/a&gt; redis 的持久化&lt;/h3&gt;
&lt;p&gt;redis 是 nosql 数据库，需要把数据保存到磁盘。&lt;br&gt;
redis 所有的数据都是保存在内存中，保存的数据量取决于内存的容量。&lt;br&gt;
redis 提供了两种持久化机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RDB: 默认开启，快照模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AOF：日志存储，把对 redis 的操作的命令以日志方式存储到文件，当需要恢复数据时，从头到尾把命令执行一遍， 需要手动开启，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注：如果同时开启了 RBD 和 AOF 默认是使用 aof 恢复数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rdb默认使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb默认使用&#34;&gt;#&lt;/a&gt; RDB（默认使用）&lt;/h4&gt;
&lt;p&gt;RDB 方式是通过快照（ snapshotting ）完成的，当符合一定条件时 Redis 会自动将内存中的数据进行，快照并持久化到硬盘&lt;br&gt;
执行时机：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;符合指定配置的快照规则&lt;/li&gt;
&lt;li&gt;执行 save 或 bgsave 命令 save 主线程去快照 bgsave 调用异步线程去快照&lt;br&gt;
主线程是单线程 4.0 I/O 操作 已经有多线程概念&lt;/li&gt;
&lt;li&gt;执行 flushall 或 flushdb&lt;/li&gt;
&lt;li&gt;执行主从复制操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以手动控制快照规则&lt;br&gt;
 save 多少秒内 数据变了多少&lt;br&gt;
 save “” : 不使用 RDB 存储&lt;br&gt;
 save 900 1 ： 表示 15 分钟（900 秒钟）内至少 1 个键被更改则进行快照。&lt;br&gt;
save 300 10 ： 表示 5 分钟（300 秒）内至少 10 个键被更改则进行快照。&lt;br&gt;
save 60 10000 ：表示 1 分钟内至少 10000 个键被更改则进行快照。&lt;/p&gt;
&lt;p&gt;快照过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;redis 调用系统中的 fork 函数复制一份当前进程的副本（子进程）&lt;/li&gt;
&lt;li&gt;父进程继续接收客户端的发来的命令，而子进程则开始将内存中的数据写入到硬盘中的临时文件，&lt;/li&gt;
&lt;li&gt;当子进程写完所有的数据后，会用临时文件替换掉旧的 rdb 文件，至此一次快照完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;rdb 的优缺点&lt;br&gt;
优点：&lt;br&gt;
RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进&lt;br&gt;
程，然后这个子进程就会处理接下来的所有保存工作，父进程无需执行任何磁盘 I/O 操作.&lt;/p&gt;
&lt;p&gt;缺点：使用 RDB 方式实现持久化，一旦 Redis 异常退出，就会丢失最后一次快照以后更改的所有数据，如果数据集比较大的时候， fork 可以能比较耗时，造成服务器在一段时间内停&lt;br&gt;
止处理客户端的请求；&lt;/p&gt;
&lt;h4 id=&#34;aof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof&#34;&gt;#&lt;/a&gt; AOF&lt;/h4&gt;
&lt;p&gt;默认情况下 Redis 没有开启 AOF （ append only file ）方式的持久化。&lt;br&gt;
开启 AOF 持久化后，每执行一条会更改 Redis 中的数据的命令， Redis 就会将该命令写入硬盘中的 AOF 文件，这一过程会降低 Redis 的性能，但大部分情况下这个影响是能够接受的，另外使用较快的硬盘可以提高 AOF 的性能。&lt;br&gt;
Redis 每次更改数据的时候， aof 机制都会将命令记录到 aof 文件，但是实际上由于操作系统的缓存机制，数据并没有实时写入到硬盘，而是进入硬盘缓存。再通过硬盘缓存机制去刷新到保存到文件。&lt;/p&gt;
&lt;h4 id=&#34;混合持久化方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#混合持久化方式&#34;&gt;#&lt;/a&gt; 混合持久化方式&lt;/h4&gt;
&lt;p&gt;这是在 4.0 之后的新版本中新增的。混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。&lt;br&gt;
有两种开启方式：&lt;br&gt;
1、通过命令行开启；&lt;br&gt;
2、通过配置文件开启&lt;/p&gt;
&lt;h2 id=&#34;redis-集群模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-集群模式&#34;&gt;#&lt;/a&gt; Redis 集群模式&lt;/h2&gt;
&lt;h3 id=&#34;主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制&#34;&gt;#&lt;/a&gt; 主从复制&lt;/h3&gt;
&lt;h3 id=&#34;哨兵集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哨兵集群&#34;&gt;#&lt;/a&gt; 哨兵集群&lt;/h3&gt;
&lt;h3 id=&#34;redis-cluster-集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-cluster-集群&#34;&gt;#&lt;/a&gt; Redis Cluster 集群&lt;/h3&gt;
&lt;h4 id=&#34;集群介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群介绍&#34;&gt;#&lt;/a&gt; 集群介绍&lt;/h4&gt;
&lt;h5 id=&#34;1-搭建主从&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-搭建主从&#34;&gt;#&lt;/a&gt; 1、搭建主从&lt;/h5&gt;
&lt;p&gt;主节点：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;port 8001&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;daemonize no&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;protected-mode no&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;1-搭建分片集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-搭建分片集群&#34;&gt;#&lt;/a&gt; 1、搭建分片集群&lt;/h5&gt;
&lt;p&gt;测试是在一台服务器上同时启动多个 redis 实例完成的，当然也可以使用多个服务器目前条件有限，&lt;br&gt;
1）先下载安装一台单机的 redis&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 GCC 环境&lt;br&gt;
 yum install -y gcc-c++&lt;br&gt;
yum install -y wget&lt;/li&gt;
&lt;li&gt;下载并解压缩 Redis 源码压缩包&lt;br&gt;
 wget &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rvd25sb2FkLnJlZGlzLmlvL3JlbGVhc2VzL3JlZGlzLTUuMC40LnRhci5neg==&#34;&gt;http://download.redis.io/releases/redis-5.0.4.tar.gz&lt;/span&gt;&lt;br&gt;
tar -zxf redis-5.0.4.tar.gz&lt;br&gt;
3. 编译原码&lt;br&gt;
 cd redis-5.0.4&lt;br&gt;
make&lt;br&gt;
4. 安装 Redis ，需要通过 PREFIX 指定安装路径，如果不指定默认是安装到 /usr/lcoal/bin 启动的适合不太方便&lt;br&gt;
 make install PREFIX=/kkb/server/redis&lt;br&gt;
 这步做完最好把安装包里面的 redis.conf 文件复制一份到安装目录下的 bin 目录中，这样启动就方便很多&lt;br&gt;
 5. 修改配置文件参数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 将`daemonize`由`no`改为`yes`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;daemonize yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 默认绑定的是回环地址，默认不能被其他机器访问&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# bind 127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 是否开启保护模式，由yes该为no&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;protected-mode no&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6. 启动服务&lt;br&gt;
./redis-server redis.conf&lt;br&gt;
7. 关闭服务&lt;br&gt;
./redis-cli shutdown&lt;br&gt;
 这样单机就搭建完成了。下面是集群&lt;/p&gt;
&lt;p&gt;2）将 bin 目录下的数据持久化文件删掉，在启动集群前要保证是一台全新的 redis. 只保留以下 7 个文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230250244.png&#34; alt=&#34;image-20230905230250244&#34;&gt;&lt;br&gt;
3) 将 bin 目录复制 6 份，分别命名 1-6，修改每个目录里面的 redi-conf 文件，将端口号分别改为 8801-8806&lt;br&gt;
 将配置文件中的 设置为此 cluster-enable yes&lt;br&gt;
 另外需要关闭防火墙，或者设置白名单，开启端口等等。不然多个服务器之间集群无法访问&lt;/p&gt;
&lt;p&gt;4） 启动所有的 redis，我这里写了一个脚本启动&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd bin-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod 777 redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-server redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd bin-2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod 777 redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-server redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd bin-3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod 777 redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-server redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd bin-4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod 777 redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-server redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd bin-5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod 777 redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-server redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd bin-6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod 777 redis-server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./redis-server redis.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5）进入 bin-1 中，使用以下命令，创建集群&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./redis-cli --cluster create 192.168.1.110:8001 192.168.1.110:8002 192.168.1.110:8003 192.168.1.110:8004 192.168.1.110:8005 192.168.1.110:8006 --cluster-replicas 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的参数 1 表示 每个 redis 有一个备份 当主机挂了，备份定上，这也是为什么需要 6 个的原因，&lt;br&gt;
6) 如下图，在过程中输入 yes 启动成功&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230303127.png&#34; alt=&#34;image-20230905230303127&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230310340.png&#34; alt=&#34;image-20230905230310340&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230318236.png&#34; alt=&#34;image-20230905230318236&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-连接集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-连接集群&#34;&gt;#&lt;/a&gt; 2、连接集群&lt;/h4&gt;
&lt;p&gt;连接集群中任意一台机器都行，例如使用 cli 连接 8001 机器&lt;br&gt;
./redis-cli -h 192.168.1.110 -p 8001 -c&lt;br&gt;
 连接集群一定要加 - c 这个参数，不然插入会报错，因为集群模式下，每次新增键都需要进行插槽计算。如果用可视化也是需要集群模式连接&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230325571.png&#34; alt=&#34;image-20230905230325571&#34;&gt;&lt;br&gt;
 使用 Java 去连接时，需要将所以的节点列出来，然后他会自己去选择连接&lt;/p&gt;
&lt;h4 id=&#34;3-查看集群状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-查看集群状态&#34;&gt;#&lt;/a&gt; 3、查看集群状态&lt;/h4&gt;
&lt;h4 id=&#34;4-集群优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-集群优缺点&#34;&gt;#&lt;/a&gt; 4、集群优缺点&lt;/h4&gt;
&lt;p&gt;客户端与 Redis 节点直连，不需要中间 Proxy 层，直接连接任意一个 Master 节点&lt;br&gt;
根据公式 HASH_SLOT=CRC16 (key) mod 16384，计算出映射到哪个分片上，然后 Redis 会去相应的节&lt;br&gt;
点进行操作&lt;br&gt;
优点:&lt;br&gt;
(1) 无需 Sentinel 哨兵监控，如果 Master 挂了，Redis Cluster 内部自动将 Slave 切换 Master&lt;br&gt;
 (2) 可以进行水平扩容&lt;br&gt;
 (3) 支持自动化迁移，当出现某个 Slave 宕机了，那么就只有 Master 了，这时候的高可用性就无法很好的保证&lt;br&gt;
了，万一 Master 也宕机了，咋办呢？ 针对这种情况，如果说其他 Master 有多余的 Slave ，集群自动把多余&lt;br&gt;
的 Slave 迁移到没有 Slave 的 Master 中。&lt;br&gt;
缺点:&lt;br&gt;
(1) 批量操作是个坑&lt;br&gt;
 (2) 资源隔离性较差，容易出现相互影响的情况。&lt;/p&gt;
&lt;h2 id=&#34;redis数据存储细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis数据存储细节&#34;&gt;#&lt;/a&gt; redis 数据存储细节&lt;/h2&gt;
&lt;p&gt;redis 的一个 DB 就是一个 HashTable,&lt;br&gt;
 一个 hashtable 由 1 个 dict 结构、2 个 dictht 结构、1 个 dictEntry 指针数组（称为 bucket）和多个 dictEntry 结构组成&lt;br&gt;
 dictEntry 结构用于保存键值对，结构定义如下：&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230336488.png&#34; alt=&#34;image-20230905230336488&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;redis的对象类型与内存编码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis的对象类型与内存编码&#34;&gt;#&lt;/a&gt; redis 的对象类型与内存编码&lt;/h4&gt;
&lt;p&gt;Redis 支持 5 种对象类型，而每种结构都有至少两种编码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String&lt;br&gt;
 字符串是最基础的类型，因为所有的键都是字符串类型，且字符串之外的其他几种复杂类型的元素也是字符串&lt;br&gt;
字符串长度不能超过 512MB。有三种编码 分别是 int ;embstr ;raw; 数据比较少时使用 embstr 数据比较多时使用 raw&lt;br&gt;
key-value&lt;br&gt;
SDS 结构体进行存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List&lt;br&gt;
 列表（list）用来存储多个有序的字符串，每个字符串称为元素；&lt;br&gt;
一个列表可以存储 2^64-1 个元素。&lt;br&gt;
Redis 中的列表支持两端插入和弹出，并可以获得指定位置（或范围）的元素，可以充当数组、队列、栈等。&lt;br&gt;
Redis3.0 之前列表的内部编码可以是压缩列表（ziplist）或双端链表（linkedlist）但是在 3.2 版本之后 因为转换也 是个费时且复杂的操作，引入了一种新的数据格式，结合了双向列表 linkedlist 和 ziplist 的特点，称之为 quicklist。有 的节点都用 quicklist 存储，省去了到临界条件是的格式转换。&lt;br&gt;
压缩列表（ziplist）是 Redis 为了节省内存而开发的，是由一系列特殊编码的连续内存块组成的顺序型数据结&lt;br&gt;
构，一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值，放到一个连续内存区。当一个列表只包含少量列表项时，并且每个列表项时小整数值或短字符串，那么 Redis 会使用压缩列表来做该列表的底层实现，&lt;br&gt;
 目前使用的是 quicklist 我们仍旧可以将其看作一个双向列表，但是列表的每个节点都是一个 ziplist，其实就是&lt;br&gt;
 linkedlist 和 ziplist 的结合。quicklist 中的每个节点 ziplist 都能够存储多个数据元素。&lt;br&gt;
Redis3.2 开始，列表采用 quicklist 进行编码。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905230344677.png&#34; alt=&#34;image-20230905230344677&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hash&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Redis 中内层的哈希既可能使用哈希表，也可能使用压缩列表。&lt;/li&gt;
&lt;li&gt;只有同时满足下面两个条件时，才会使用压缩列表：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;哈希中元素数量小于 512 个；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈希中所有键值对的键和值字符串长度都小于 64 字节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set&lt;br&gt;
 但集合与列表有两点不同：集合中的元素是无序的，因此不能通过索引来操作元素；集合中的元素不能有重复。&lt;br&gt;
intSet: 集合中的元素都是数值类型&lt;br&gt;
只有同时满足下面两个条件时，集合才会使用整数集合：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集合中元素数量小于 512 个；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集合中所有元素都是整数值。&lt;br&gt;
如果有一个条件不满足，则使用哈希表；且编码只可能由整数集合转化为哈希表，反方向则不可能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZSet&lt;br&gt;
 有序集合的内部编码可以是压缩列表（ziplist）或跳跃表（skiplist）。&lt;br&gt;
只有同时满足下面两个条件时，才会使用压缩列表：&lt;br&gt;
1）有序集合中元素数量小于 128 个；&lt;br&gt;
2）有序集合中 所有成员长度都不足 64 字节 。&lt;br&gt;
如果有一个条件不满足，则使用跳跃表；且编码只可能由压缩列表转化为跳跃表，反方向则不可能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;跳表-zskiplist&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳表-zskiplist&#34;&gt;#&lt;/a&gt; 跳表 zskiplist：&lt;/h4&gt;
&lt;p&gt;类似于折半查找&lt;/p&gt;
&lt;h2 id=&#34;redis性能优化简单学了点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis性能优化简单学了点&#34;&gt;#&lt;/a&gt; redis 性能优化（简单学了点）&lt;/h2&gt;
&lt;h3 id=&#34;优化内存占用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优化内存占用&#34;&gt;#&lt;/a&gt; 优化内存占用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;利用 jemalloc 内存分配器（默认使用）&lt;/li&gt;
&lt;li&gt;能用整形 / 长整型的尽量使用，减少使用字符串&lt;/li&gt;
&lt;li&gt;利用共享对象，引用常量池&lt;/li&gt;
&lt;li&gt;缩短键值对的存储长度（减少 key 的长度）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;性能优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#性能优化&#34;&gt;#&lt;/a&gt; 性能优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;设置键值的过期时间&lt;/li&gt;
&lt;li&gt;使用 lazy free 特性，（惰性删除），不是马上删掉，而是放到删除队列里面，一起删除，或者是开子线程删除。&lt;/li&gt;
&lt;li&gt;限制 redis 内存大小，设置内存淘汰策略&lt;/li&gt;
&lt;li&gt;禁用长耗时的查询命令&lt;/li&gt;
&lt;li&gt;使用 slowlog 优化耗时命令&lt;/li&gt;
&lt;li&gt;避免大量数据同时失效&lt;/li&gt;
&lt;li&gt;使用 Pipeline 批量操作数据&lt;/li&gt;
&lt;li&gt;客户端使用连接池优化&lt;/li&gt;
&lt;li&gt;使用分布式架构来增加读写速度&lt;/li&gt;
&lt;li&gt;禁用 THP 特性 /*&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="原理" />
        <category term="学习笔记" />
        <updated>2023-09-05T14:57:10.000Z</updated>
    </entry>
    <entry>
        <id>https://zhai-xing.github.io/hexo-blog/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</id>
        <title>MySQL学习笔记</title>
        <link rel="alternate" href="https://zhai-xing.github.io/hexo-blog/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
        <content type="html">&lt;h1 id=&#34;一-mysql基础篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-mysql基础篇&#34;&gt;#&lt;/a&gt; 一、 Mysql 基础篇&lt;/h1&gt;
&lt;h4 id=&#34;语句执行流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语句执行流程&#34;&gt;#&lt;/a&gt; 语句执行流程&lt;/h4&gt;
&lt;h5 id=&#34;mysql查询语句执行流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql查询语句执行流程&#34;&gt;#&lt;/a&gt; mysql 查询语句执行流程：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;建立连接：这里需要验证身份和权限&lt;/li&gt;
&lt;li&gt;查询缓存 (如果有缓存则直接返回缓存数据，如果木有则进行下一步，需要注意，如果有增删改操作会清除掉缓存)&lt;/li&gt;
&lt;li&gt;解析器：先做词法分析、再做语法分析 (注：表不存在或者字段不存在，并不是在解析器)&lt;/li&gt;
&lt;li&gt;执行器： 执行器有三个阶段，预处理阶段、优化阶段、执行阶段&lt;/li&gt;
&lt;li&gt;返回数据&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;词法分析主要是识别关键字构成语法树，这样方便后面的模块得到关键字、表名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法分析主要是分析语法是否正确&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预处理阶段：检查表名、列名是否存在 将 * 号换成所有列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化阶段：优化器主要是将 sql 语句的执行计划确定下来，例如索引的选择、&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行阶段：执行器就会和存储引擎交互了，交互是以记录为单位的。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225131183.png&#34; alt=&#34;image-20230905225131183&#34;&gt;&lt;br&gt;
mysql 更新语句执行流程：&lt;br&gt;
更新语句同样需要走一次查询数据的流程，但数据的更新是在存储引擎中做的，在本文中存储引擎选择的是 Innodb。更新流程需要有日志的辅助，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重做日志: redo Log 是物理日志，记录了某个数据页做了什么修改，每当执行一个事务就会产生一条或者多条物理日志。&lt;mark&gt;事务提交时&lt;/mark&gt;，先将 redo log 持久化到磁盘即可。并且 redo 是可重用的，也就是说空间大小是可设置的，从头开始写，写到末尾又回到开头写， redo log 解决了事务中的持久性。这里到了一个 WAL 技术，&lt;br&gt;
&lt;mark&gt;WAL 技术指的是，MySQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写到磁盘上。&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回滚日志: undo log 是 Innodb 存储引擎层生成的日志，实现了事务中的原子性，主要用于事务回滚和 MVCC。&lt;br&gt;
&lt;mark&gt;每开始一个事务都会分配一个 undo 空间，在事务没提交之前 Innodb 会先记录更新前的数据到 undo log 中&lt;/mark&gt;，当需要执行回滚时 就执行一条相反的操作。undo log 有两个参数：roll_pointer 指针和一个 trx_id 事务 id，通过 trx_id 可以知道该记录是被哪个事务修改的；通过 roll_pointer 指针可以将这些 undo log 串成一个链表，形成版本链。&lt;br&gt;
&lt;mark&gt;当事务提交后 相关的 undo 日志记录会被标记为 &amp;quot;已提交&amp;quot;，这些已提交的 undo 日志记录会在后续的清理过程中被回收和删除&lt;/mark&gt;&lt;br&gt;
&lt;mark&gt;实现事务回滚，保障事务的原子性：如果出现了错误或者用户执行了 ROLLBACK 语句，可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归档日志 ：Server 层生成的日志，主要用于数据备份和主从复制。binlog 是 server 层的日志，不同的存储引擎都可用， 而上面两个是 innoDB 独有的，在完成一条更新操作后，Server 层会生成一条 binlog，等之后事务提交的时候，会将该事物执行过程中产生的所有 binlog 统一写入 binlog 文件。binlog 文件是记录了所有数据库表结构变更和表数据修改的日志，不会记录查询类的操作。&lt;br&gt;
1. 执行器负责具体执行，会调用存储引擎的接口，通过索引获取到要操作的数据的记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;执行器得到聚簇索引记录后 会查看更新前和更新后的数据是否一致，如果一致就不执行。&lt;/li&gt;
&lt;li&gt;开启事务，innodb 在执行操作前需要先开启事务，InnoDB 层更新记录前，首先要记录相应的 undo log，因为这是更新操作，需要把被更新的列的旧值记下来&lt;/li&gt;
&lt;li&gt;innodb 层开始更新记录，会先更新内存（同时标记为脏页），然后将记录写到 redo log 里面，这个时候更新就算完成了&lt;/li&gt;
&lt;li&gt;至此一条记录更新完成了&lt;/li&gt;
&lt;li&gt;在一条更新语句执行完成后，然后开始记录该语句对应的 binlog&lt;/li&gt;
&lt;li&gt;事务提交，事务提交分为两个阶段
&lt;ul&gt;
&lt;li&gt;prepare 阶段：将 redo log 对应的事务状态设置为 prepare，然后将 redo log 刷新到硬盘；&lt;/li&gt;
&lt;li&gt;commit 阶段：将 binlog 刷新到磁盘，接着调用引擎的提交事务接口，将 redo log 状态设置为 commit（将事务设置为 commit 状态后，刷入到磁盘 redo log 文件）；&lt;br&gt;
8. 至此，一条更新语句执行完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二-日志篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-日志篇&#34;&gt;#&lt;/a&gt; 二、日志篇&lt;/h1&gt;
&lt;p&gt;mysql 日志文件分为三种:&lt;/p&gt;
&lt;h3 id=&#34;undo-log-回滚日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#undo-log-回滚日志&#34;&gt;#&lt;/a&gt; undo log 回滚日志&lt;/h3&gt;
&lt;p&gt;回滚日志是 Innodb 存储引擎层生成的日志，实现了事务中的原子性，主要是用于事务回滚和 MVCC, 考虑一个问题，一个事务在执行过程中还没有提交事务，mysql 发生了崩溃，就需要 undo log 来回滚到事务之前的数据去。&lt;br&gt;
undo log 是一种用于撤销回退的日志。在事务没提交之前，MySQL 会先记录更新前的数据到 undo log 日志文件里面，当事务回滚时，可以利用 undo log 来进行回滚。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225157734.png&#34; alt=&#34;image-20230905225157734&#34;&gt;&lt;br&gt;
 原理：&lt;br&gt;
每当 innodb 引擎对一条记录进行操作时，要把回滚时需要的信息都记录到 undolog 里，发生回滚时就读取 undolog 的数据，做相反操作。不同的操作，记录的内容也不一样&lt;br&gt;
另外 undolog +readview 实现了 MVCC：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于读提交隔离级别是在每个 select 都会生成一个新的 read view 也意味着事务期间多次读取同一个数据 前后两次读的数据可能会出现不一致，因为另外一个事务修改了记录并提交了&lt;/li&gt;
&lt;li&gt;对于可重复读级别，是启动事务时生成了一个 read view 然后整个事务期间都在用整个 read view 这样就保证了事务期间读到的数据都是事务启动前的记录。&lt;br&gt;
&lt;mark&gt;undo log 和数据页的刷盘策略是一样的，都需要通过 redo log 保证持久化。&lt;/mark&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;redo-log-重做日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redo-log-重做日志&#34;&gt;#&lt;/a&gt; redo log 重做日志&lt;/h3&gt;
&lt;p&gt;为了防止断电导致数据丢失的问题，当有一条记录需要更新的时候 innodb 引擎会先更新内存，然后将本次对整个页的修改以 redolog 的形式记录下来，就算更新完成了，后续 innodb 会在适当的时候由后台线程将缓存在 BufferPool 的脏页刷新到磁盘，这就是 WAL 技术，WAL 技术是指 MYSQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写入到磁盘&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;redolog 有自己的内存缓存，&lt;/li&gt;
&lt;li&gt;redolog 有刷盘机制可手动配置&lt;/li&gt;
&lt;li&gt;InnoDB 存储引擎有 1 个重做日志文件组 ( redo log Group） 是一个文件组写完了可以循环写，防止丢失&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;undo和-redo的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#undo和-redo的区别&#34;&gt;#&lt;/a&gt; undo 和 redo 的区别&lt;/h4&gt;
&lt;p&gt;这两种日志是属于 InnoDB 存储引擎的日志，它们的区别在于：&lt;br&gt;
redo log 记录了此次事务「完成后」的数据状态，记录的是更新之后的值；&lt;br&gt;
undo log 记录了此次事务「开始前」的数据状态，记录的是更新之前的值；&lt;br&gt;
&lt;mark&gt;事务提交之前发生了崩溃，重启后会通过 undo log 回滚事务，事务提交之后发生了崩溃，重启后会通过 redo log 恢复事务，&lt;/mark&gt;&lt;/p&gt;
&lt;h3 id=&#34;binglog-归档日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#binglog-归档日志&#34;&gt;#&lt;/a&gt; binglog 归档日志&lt;/h3&gt;
&lt;p&gt;binglog 主要是做备份和主从复制的，并且 binglog 是 server 层的日志，是全量日志，&lt;br&gt;
而前面俩都是 Innodb 的日志，换一个存储引擎就没有了。binlog 是追加写，一个文件写满了就创建一个新的继续写，不会覆盖日志，但是 redolog 会覆盖，&lt;br&gt;
binglog 日志有三种格式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;StateNet: 每一条修改数据的 sql 都会被记录到 binlog 中，，主从复制时，可以直接运行语句复现，STATEMENT 有动态函数的问题，比如你用了 uuid 或者 now 这些函数，你在主库上执行的结果并不是你在从库执行的结果，这种随时在变的函数会导致复制的数据不一致；&lt;/li&gt;
&lt;li&gt;row：记录行数据最终被修改的样子，&lt;br&gt;
4.mixed 包含了 statement 和 row 模式，会根据不同情况自动使用上面的两种日志&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;三-mysql事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-mysql事务&#34;&gt;#&lt;/a&gt; 三、MySQL 事务&lt;/h1&gt;
&lt;p&gt;插入一条数据发生了什么？&lt;br&gt;
使用 Innodb 引擎时执行增删改操作时，会自动在 Innodb 引擎层开启事务。&lt;br&gt;
ACID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性：事务最小工作单元，要么全成功，要么全失败（重做日志了实现的）&lt;/li&gt;
&lt;li&gt;一致性：事务开始和结束后，数据库的完整性不会被破坏&lt;/li&gt;
&lt;li&gt;隔离性：不同事务之间互不影响，（是通过 MVCC 来实现的）
&lt;ol&gt;
&lt;li&gt;读未提交 RU：一个事务读取到另一个事务未提交的数据。（会出现脏读）&lt;/li&gt;
&lt;li&gt;读已提交（RC)：一个事务读取到另一个事务已经提交的数据，（会出现不可重复读，同一个 sql 语句在一个事务里面读到的数据不一致）&lt;/li&gt;
&lt;li&gt;可重复读 (RR)：一个事务只能读到另一个已经提交的事务修改的数据（会出现幻读，一个事务因读取到另一个事务已提交的 insert 数据或者 dlete 数据，导致对同一张表读取两次以上的结果不一致。查询结果是多条记录时，才有可能出现幻读。）&lt;/li&gt;
&lt;li&gt;串行化：&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久性：事务提交后，对数据的修改是永久性的，即使系统故障也不会丢失。（回滚日志来实现的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并行事务会引发什么问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并行事务会引发什么问题&#34;&gt;#&lt;/a&gt; 并行事务会引发什么问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;脏读：一个事务读到了另一个未提交事务修改过的数据&lt;/li&gt;
&lt;li&gt;不可重复读：一个事务内两次读取数据出现不一致的情况，&lt;/li&gt;
&lt;li&gt;幻读：在一个事务内多次查询某个符合查询条件的记录数量，如果出现前后两次查询到的记录数量不一致，就是幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事务与mvcc底层原理详解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务与mvcc底层原理详解&#34;&gt;#&lt;/a&gt; 事务与 MVCC 底层原理详解&lt;/h3&gt;
&lt;p&gt;MVCC 实现了两个事务隔离级别，可重复读和读已提交，MVCC 使数据库读不加锁，提高了数据库的并发处理能力，多版本并发控制仅仅是一种技术理念，没有统一的标准，其核心理念就是快照，不同的事务访问不同版本的数据快照，从而实现不同的事务隔离级别。&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225220682.png&#34; alt=&#34;image-20230905225220682&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;m_ids ：指的是在创建 Read View 时，当前数据库中活跃事务的事务 id 列表，活跃事务指的就是，启动了但还没提交的事务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;min_trx_id ：指的是在创建 Read View 时，当前数据库中活跃事务中事务 id 最小的事务，也就是 m_ids 的最小值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;max_trx_id ：创建 Read View 时当前数据库中应该给下一个事务的 id 值，也就是全局事务中最大的事务 id 值 + 1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;creator_trx_id ：指的是创建该 Read View 的事务的事务 id。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果记录的 trx_id 值小于 Read View 中的 min_trx_id 值，表示这个版本的记录是在创建 Read View 前已经提交的事务生成的，所以该版本的记录对当前事务可见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果记录的 trx_id 值大于等于 Read View 中的 max_trx_id 值，表示这个版本的记录是在创建 Read View 后才启动的事务生成的，所以该版本的记录对当前事务不可见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果记录的 trx_id 值在 Read View 的 min_trx_id 和 max_trx_id 之间，需要判断 trx_id 是否在 m_ids 列表中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果记录的 trx_id 在 m_ids 列表中，表示生成该版本记录的活跃事务依然活跃着 (还没提交事务)，所以该版本的记录对当前事务不可见。&lt;/li&gt;
&lt;li&gt;如果记录的 trx_id 不在 m_ids 列表中，表示生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何解决幻读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何解决幻读&#34;&gt;#&lt;/a&gt; 如何解决幻读&lt;/h3&gt;
&lt;p&gt;分为快照读和当前读&lt;/p&gt;
&lt;h4 id=&#34;快照读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快照读&#34;&gt;#&lt;/a&gt; 快照读&lt;/h4&gt;
&lt;p&gt;通过 MVCC 方式解决幻读，可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一直的。即使中途有其他事务写入了一条数据，也是查不出来的。&lt;br&gt;
&lt;mark&gt;对于快照读， MVCC 并不能完全避免幻读现象&lt;/mark&gt;。&lt;mark&gt;当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读&lt;/mark&gt;&lt;/p&gt;
&lt;h4 id=&#34;当前读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#当前读&#34;&gt;#&lt;/a&gt; 当前读&lt;/h4&gt;
&lt;p&gt;通过 next-key lock 方式解决了幻读，因为当执行 select for update 语句的时候会加上 next key lock 如果有其他事务在锁范围内插入了已经语句 这个插入语句就会被阻塞.&lt;/p&gt;
&lt;h4 id=&#34;lbcc-基于锁的并发控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lbcc-基于锁的并发控制&#34;&gt;#&lt;/a&gt; LBCC 基于锁的并发控制。&lt;/h4&gt;
&lt;p&gt;一个事务去读一个数据库的时候就加上锁，不允许其他事务操作&lt;/p&gt;
&lt;h4 id=&#34;innodb的mvcc实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#innodb的mvcc实现&#34;&gt;#&lt;/a&gt; Innodb 的 MVCC 实现&lt;/h4&gt;
&lt;p&gt;MVCC 在 mysql 中的实现是依赖的 undo log 和 read view&lt;br&gt;
MVCC 只支持两种隔离级别 分别是：读已提交，可重复读&lt;br&gt;
根据不同的行为，undo log 分为两种 insert undo log 和 update undo log&lt;br&gt;
insert undo log 是在 inser 操作下产生的 undo log&lt;br&gt;
 因为 insert 操作的记录只对事务本身可见，对于其他事务&lt;/p&gt;
&lt;h4 id=&#34;读提交的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读提交的实现&#34;&gt;#&lt;/a&gt; 读提交的实现&lt;/h4&gt;
&lt;p&gt;读提交隔离级别是在每次读取数据时，都会生成一个新的 Read View。事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务&lt;/p&gt;
&lt;h1 id=&#34;四-mysq锁篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-mysq锁篇&#34;&gt;#&lt;/a&gt; 四、Mysq 锁篇&lt;/h1&gt;
&lt;h3 id=&#34;锁介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#锁介绍&#34;&gt;#&lt;/a&gt; 锁介绍&lt;/h3&gt;
&lt;p&gt;范围分：全局锁，表级锁，行级锁&lt;br&gt;
根据功能分：共享锁（s)，排他锁 (x)，&lt;br&gt;
全局锁就是对整个数据库实例枷锁，加锁后整个数据库就处于只读状态，后续的 MDL ，DDL 语句 和已经更新操作的提交语句都将被阻塞，一般应用于数据库全局备份时，保证数据完整性和一致性。&lt;br&gt;
加锁命令：flush table with read lock;&lt;br&gt;
 释放锁 unlock tables;&lt;br&gt;
 一般是在数据库做备份的时候才使用全局锁，但是会带来问题，全局锁会导致数据库在时间内处于只读状态，会导致业务停滞，&lt;br&gt;
解决方案，如果数据库引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前可先开启事务，会先创建 ReadView 然后整个事务执行期间都在使用这个 ReadView ，而且在可重复读的情况下，即使其他业务更新数据库，也不会有影响。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;表级锁 (server 实现的): 有四种 读锁，写锁，元数据锁&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表级共享锁：lock table 表名 read;&lt;/li&gt;
&lt;li&gt;表级排他锁: lock table 表名 write&lt;/li&gt;
&lt;li&gt;元数据锁： 在一个事务中对一个表进行查询操作不允许其他会话对表结构进行修改，就在表上加元数据锁&lt;/li&gt;
&lt;li&gt;自增锁：使用自增字段时，使用自增主键保证主键不冲突&lt;/li&gt;
&lt;li&gt;意向锁：当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。&lt;br&gt;
那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录&lt;br&gt;
意向锁的目的是为了快速判断表里释放有记录被加锁&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;行级锁&lt;br&gt;
&lt;strong&gt;要求必须使用 Innodb 引擎&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录锁：锁定索引中的一条记录&lt;/li&gt;
&lt;li&gt;间隙锁：要么锁住索引记录中间的值，要么锁住第一个索引记录前面的值或者最后一个索引记录后面的值&lt;/li&gt;
&lt;li&gt;临健锁：是索引记录上的记录锁和在索引记录之前的间隙锁的组合（间隙锁 + 记录锁）&lt;/li&gt;
&lt;li&gt;插入意向锁： 做 insert 操作时添加的对记录 id 的锁&lt;br&gt;
记录锁：根据主键等值更新时使用记录锁&lt;br&gt;
共享记录锁: select * from where id=1 lock inshare mode&lt;br&gt;
 排他记录锁: select * from where id=1 for update;&lt;br&gt;
 意向锁就是一个标志位，表示当前表中，是否有行锁&lt;br&gt;
意向锁分为：行锁：S 意向锁：IS; 行锁 X 意向锁：IX&lt;br&gt;
 间隙锁：仅仅锁住一个索引区间，在记录和记录之间的范围区间就是间隙，间隙锁就是加在区间之上，防止插入数据，目的就是幻读 (读一个范围数据，读到了其他数据插入的数据) 在更新过程中，不仅需要对记录加锁还需要在记录与记录之间加锁，加的就是间隙锁。&lt;br&gt;
临键锁：就是记录锁 + 间隙锁，是一个左开右闭区间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁的产生&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#死锁的产生&#34;&gt;#&lt;/a&gt; 死锁的产生&lt;/h3&gt;
&lt;p&gt;有两个会话，互相持有对方所需要的资源。&lt;/p&gt;
&lt;h4 id=&#34;如何避免死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何避免死锁&#34;&gt;#&lt;/a&gt; 如何避免死锁・&lt;/h4&gt;
&lt;p&gt;1、注意程序逻辑，最常见的就是更新表，程序的更新过程最好意思一致的&lt;br&gt;
 2、保持事务的轻量，越是轻量的事务，占有越少的锁资源，这样发生死锁的概率就很低了&lt;br&gt;
 3、提高运行速度，避免使用子查询，尽量使用主键等&lt;br&gt;
 4、尽快提交事务，减少持有锁的时间，事务越早提交，锁就越早释放。&lt;/p&gt;
&lt;h1 id=&#34;五-索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-索引&#34;&gt;#&lt;/a&gt; 五、索引&lt;/h1&gt;
&lt;p&gt;什么是索引，帮助快速查找数据的一个数据结构。索引可以说是数据的目录，&lt;br&gt;
&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225256269.png&#34; alt=&#34;image-20230905225256269&#34;&gt;&lt;br&gt;
 索引分类&lt;br&gt;
按数据结构来分，可以分为，B + 树索引，Hash 索引，Full-text 索引&lt;br&gt;
按物理存储分类：聚簇索引 (主键索引)，二级索引 (辅助索引)&lt;br&gt;
 按字段特性分类： 主键索引、唯一索引、普通索引、前缀索引&lt;br&gt;
按字段个数分类： 单列索引，联合索引。&lt;br&gt;
如果有主键，默认会使用主键作为聚簇索引的索引键（key）；&lt;br&gt;
如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键（key）；&lt;br&gt;
在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键（key）；&lt;/p&gt;
&lt;h4 id=&#34;什么时候需要索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么时候需要索引&#34;&gt;#&lt;/a&gt; 什么时候需要索引：&lt;/h4&gt;
&lt;p&gt;字段有唯一性限制的&lt;br&gt;
经常用于 where 查询条件的字段，&lt;br&gt;
经常用于 group by 和 order by 的字段，这样查询的时候就不需要再去做一次排序了，&lt;/p&gt;
&lt;h4 id=&#34;什么时候不需要创建索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么时候不需要创建索引&#34;&gt;#&lt;/a&gt; 什么时候不需要创建索引&lt;/h4&gt;
&lt;p&gt;字段中有大量重复数据的，比如性别&lt;br&gt;
表数据很少的时候&lt;br&gt;
经常更新的字段不需要索引，比如余额&lt;/p&gt;
&lt;h4 id=&#34;优化索引的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优化索引的方法&#34;&gt;#&lt;/a&gt; 优化索引的方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前缀索引优化&lt;/strong&gt;&lt;br&gt;
就是使用某个字段中字符串的前几个字符建立索引，使用前缀索引可以减少索引字段的大小，但是 order by 无法使用前缀索引，无法把前缀索引当做覆盖索引使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;覆盖索引优化&lt;/strong&gt;&lt;br&gt;
在索引 B + 树的叶子节点上都能找到的那些索引。可以建立联合索引，商品 id 姓名，作为一个联合索引，可以避免回表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主键索引最好自增&lt;/strong&gt;&lt;br&gt;
那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为每次插入一条新记录，都是追加操作，不需要重新移动数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引最后设置为 NOT NULL&lt;/strong&gt;&lt;br&gt;
 如果索引列存在 NULL 会导致优化器在做索引选择的时候更加复杂，更加难以优化，因为可为 NULL 的列会使索引、索引统计和值比较都更复杂，比如进行索引统计时，count 会省略值为 NULL 的行。&lt;br&gt;
NULL 值是一个没意义的值，但是它会占用物理空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;防止索引失效&lt;/strong&gt;&lt;br&gt;
 1. 当使用左或者左右模糊匹配的时候，也就是 like % xx 或者 like % xx% 这两种方法都会造成索引失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当我们在查询条件中对索引列做了计算、函数、类型转换后也会导致失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联合索引要遵循最左匹配原则不然也会失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;where 子句中，如果 or 前的条件列是索引，而 or 后的条件不是所有，那么也会导致索引失效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All（全表扫描）&lt;br&gt;
index（全索引扫描）&lt;br&gt;
range（索引范围扫描）&lt;br&gt;
ref（非唯一索引扫描）&lt;br&gt;
eq_ref（唯一索引扫描）&lt;br&gt;
const（结果只有一条的主键或唯一索引扫描）&lt;/p&gt;
&lt;h4 id=&#34;count-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#count-是什么&#34;&gt;#&lt;/a&gt; count () 是什么？&lt;/h4&gt;
&lt;p&gt;count () 是一个聚合函数，函数的参数不仅可以是字段名，也可以是其他任意表达式，该函数作用是统计符合查询条件的记录中，函数指定的参数不为 NULL 的记录有多少个。&lt;/p&gt;
&lt;h3 id=&#34;索引的数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引的数据结构&#34;&gt;#&lt;/a&gt; 索引的数据结构&lt;/h3&gt;
&lt;p&gt;Mysql 的索引数据结构选用的是 B + 树，为什么选用呢？&lt;br&gt;
索引至少要支持等值查询和范围查询。&lt;/p&gt;
&lt;h4 id=&#34;选择hash表做查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选择hash表做查询&#34;&gt;#&lt;/a&gt; 选择 Hash 表做查询&lt;/h4&gt;
&lt;p&gt;如果是等值查询，hash 的性能是很好的，但是无法做范围查询，空间复杂度较高。&lt;/p&gt;
&lt;h4 id=&#34;二叉查找树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉查找树&#34;&gt;#&lt;/a&gt; 二叉查找树&lt;/h4&gt;
&lt;p&gt;这个是可以做等着查询和范围查询的，但是极端情况下，可能会退化成链表。&lt;/p&gt;
&lt;h4 id=&#34;平衡二叉查找树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#平衡二叉查找树&#34;&gt;#&lt;/a&gt; 平衡二叉查找树&lt;/h4&gt;
&lt;p&gt;查找的时间复杂度和树的高度有关，树有多高就需要查找多少次，每个节点的读取都对应着一次 IO 操作，在表数据量变大时，树的高度也会变大，查询效率下降严重&lt;br&gt;
并且平衡二叉查找树，不支持范围快速查找，范围查询时，需要通过根结点多次遍历。查询效率不高&lt;/p&gt;
&lt;h4 id=&#34;b树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b树&#34;&gt;#&lt;/a&gt; B 树&lt;/h4&gt;
&lt;p&gt;改造了二叉树，在一个节点上存多个数值，可以将树的高度变矮，降低磁盘的读取 IO;&lt;br&gt;
B 树是一种多叉平衡查找树&lt;/p&gt;
&lt;p&gt;B 树：非叶子节点和叶子节点都会存储数据。&lt;br&gt;
b 树缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B 树不支持范围查询的快速查找，如果我们想要查找 15 和 26 之间的数据，查找到 15 之后，需要回到&lt;br&gt;
根节点重新遍历查找，需要从根节点进行多次遍历，查询效率有待提高。&lt;/li&gt;
&lt;li&gt;如果 data 存储的是行记录，行的大小随着列数的增多，所占空间会变大。这时，一个页中可存储的&lt;br&gt;
数据量就会变少，树相应就会变高，磁盘 IO 次数就会变大&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;b树-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b树-2&#34;&gt;#&lt;/a&gt; B + 树&lt;/h4&gt;
&lt;p&gt;而 B + 树只在叶子节点上存储数据，且使用链表将叶子节点连接起来。&lt;/p&gt;
&lt;h4 id=&#34;为什么用b树不用b树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么用b树不用b树&#34;&gt;#&lt;/a&gt; 为什么用 B + 树不用 B 树&lt;/h4&gt;
&lt;p&gt;B + 树相对于 B 树在磁盘 IO 操作上具有优势，尤其适用于范围查询和索引场景&lt;/p&gt;
&lt;p&gt;在进行查询操作时，B 树可能需要在内部节点上进行多次访问才能达到叶子节点，而 B + 树由于只有叶子节点存储数据，所以查询时只需一次访问。&lt;/p&gt;
&lt;h3 id=&#34;mysql索引实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql索引实现&#34;&gt;#&lt;/a&gt; mysql 索引实现&lt;/h3&gt;
&lt;h4 id=&#34;myisam引擎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#myisam引擎&#34;&gt;#&lt;/a&gt; MyIsam 引擎&lt;/h4&gt;
&lt;p&gt;主键索引实现是使用了 B + 树，MyISAM 在查询时，会将索引节点缓存在 MySQL 缓存中，而数据缓存依赖于操作系统自身的缓存。&lt;/p&gt;
&lt;h4 id=&#34;innodbt引擎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#innodbt引擎&#34;&gt;#&lt;/a&gt; Innodbt 引擎&lt;/h4&gt;
&lt;p&gt;索引和数据文件是放在一起的，Innodb 引擎要求每张表必须有主键索引，&lt;br&gt;
每个 InnoDB 表都有一个聚簇索引 ，聚簇索引使用 B + 树构建，叶子节点存储的数据是整行记录。一般&lt;br&gt;
情况下聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB 会自动创建一个 ROWID 字&lt;br&gt;
段来构建聚簇索引。&lt;/p&gt;
&lt;p&gt;在使用辅助索引时，数据会回表，除聚簇索引之外的所有索引都称为辅助索引，InnoDB 的辅助索引只会存储主键值而非磁盘地址，&lt;br&gt;
使用辅助索引需要检索两遍索引：首先检索辅助索引获得主键，然后使用主键到主索引中检索获得记&lt;br&gt;
录。根据在辅助索引树中获取的主键 id，到主键索引树检索数据的过程称为回表查询。回表会有性能损耗，所以也有说在 Innodb 引擎里使用辅助索引，性能不如 MyIsam 引擎，因为在 Mysaml 里面辅助索引和主索引是相同的。&lt;/p&gt;
&lt;h5 id=&#34;innodb组合索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#innodb组合索引&#34;&gt;#&lt;/a&gt; Innodb 组合索引&lt;/h5&gt;
&lt;p&gt;组合索引就是一个字段包含多个索引。&lt;br&gt;
如何存储的呢，是根据创建索引时的字段先后顺序，假设组合索引是 (a,b,c) , 那么在建立索引存储结构 B + 树时，就先按照 a 字段排序，当 a 字段相同时 ，就按 b 字段排序，当 b 字段相同时，就按 c 字段排序，在写 sql 语句的时候，要按照索引创建的顺序去写条件&lt;/p&gt;
&lt;h5 id=&#34;最左前缀匹配原则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最左前缀匹配原则&#34;&gt;#&lt;/a&gt; 最左前缀匹配原则&lt;/h5&gt;
&lt;h4 id=&#34;什么情况下适合建立索引&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么情况下适合建立索引&#34;&gt;#&lt;/a&gt; 什么情况下适合建立索引&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;频繁出现在 where 条件 order 排序 group 分组 字段中的列&lt;/li&gt;
&lt;li&gt;select 频繁查询的列，考虑是否创建联合索引&lt;/li&gt;
&lt;li&gt;多表 join 关联查询 ，on 两边的字段都应该创建索引&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;索引优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引优化&#34;&gt;#&lt;/a&gt; 索引优化&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;表记录很少不需创建索引 （索引是要有存储的开销）&lt;/li&gt;
&lt;li&gt;频繁更新的字段不适合创建索引&lt;/li&gt;
&lt;li&gt;区分度低的字段不适合建立索引，例如性别，会导致扫描行数过多，再加上回表查询的消耗。如果使用索引，比全表扫描的性能还要差。这些字段一般会用在组合索引中。&lt;/li&gt;
&lt;li&gt;在 InnoDB 存储引擎中，主键索引建议使用自增的长整型，避免使用很长的字段。&lt;/li&gt;
&lt;li&gt;不建议用无序的值作为索引。例如身份证、UUID，更新数据时会发生频繁的页分裂，页内数据不紧凑，浪费磁盘空间。&lt;/li&gt;
&lt;li&gt;尽量创建组合索引，而不是单列索引，一个组合索引等于多个单列索引&lt;br&gt;
创建原则：组合索引应该把把频繁的列，区分度高的值放在前面。频繁使用代表索引的利用率高，&lt;br&gt;
区分度高代表筛选粒度大，可以尽量缩小筛选范围&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;六-架构篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-架构篇&#34;&gt;#&lt;/a&gt; 六、架构篇&lt;/h1&gt;
&lt;h4 id=&#34;mysql文件类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql文件类型&#34;&gt;#&lt;/a&gt; mysql 文件类型：&lt;/h4&gt;
&lt;p&gt;日志文件：&lt;br&gt;
错误日志&lt;br&gt;
通用日志：默认是关闭的，可以手动开启，，通用查询日志会记录用户所有的操作，&lt;br&gt;
binlog: 二进制日志，做 Mysql 主从复制时使用&lt;br&gt;
慢查询日志: mysql 调优时使用，默认关闭，&lt;br&gt;
数据文件：&lt;br&gt;
记录表结构、数据、索引信息&lt;br&gt;
 InnoDB ，MyIsam 等&lt;br&gt;
不同的存储引擎，生成的文件也不一样&lt;br&gt;
在文件管理系统中 mysql 的 一个数据库对应一个目录，&lt;br&gt;
frm 文件类型：表结构定义文件&lt;br&gt;
 MYD 文件 Mylasm 引擎创建的表，存储表中数据&lt;br&gt;
 MYI: 文件 Mylasm 引擎创建的表，存储表中索引&lt;br&gt;
 ibd 文件 InnoDB 引擎创建的表，其中包含表中数据和索引&lt;br&gt;
 MyIsam 引擎创建的表有三个文件&lt;br&gt;
 InnoDB 引擎创建的表有两个文件&lt;br&gt;
同一个数据库中，不同的表可以使用不同的数据引擎，Mysql5.5 开始默认使用 InnoDB 之前是使用的 mylsam，&lt;/p&gt;
&lt;h4 id=&#34;mysql架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql架构&#34;&gt;#&lt;/a&gt; MYSQL 架构：&lt;/h4&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;大致分为两层:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysqlServer层: 连接池、优化器、执行器等组件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;存储引擎层： Innodb，以及其他引擎，基本可以忽略 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;![](…/…/B69V2_(NQHU5$@Q[S18C9S9%201.png)&lt;br&gt;
 Mysql8 中缓存被移除了，在 mysql5.7 中依然存在，默认是关闭的，&lt;br&gt;
缓存的缺点：&lt;br&gt;
1、需要占用大量的内存空间&lt;br&gt;
 2、维护缓存需要成本。&lt;br&gt;
3、命中率不高&lt;br&gt;
在同一个 sql 语句会反复执行时，可以开启，可以使用命令查看缓存命中率&lt;/p&gt;
&lt;p&gt;分析器：&lt;br&gt;
先对 sql 进行词法分析，语法分析&lt;br&gt;
优化器：&lt;br&gt;
执行器：&lt;/p&gt;
&lt;p&gt;存储引擎&lt;br&gt;
 Mysql 有多个自带存储引擎，也可以自己去安装第三方的存储引擎，&lt;br&gt;
使用 show engines 查看 mysql 中自带的存储引擎&lt;br&gt;
&lt;strong&gt;除非需要用到某些 Innodb 不具备的特性，并且没有其他办法可以替代，否则都应该选择 Innodb 引擎&lt;/strong&gt;&lt;br&gt;
 MEMORY ：内存引擎。把数据和索引全部放到内存中。缺点是，数据库一旦重启，表数据就丢失了，表结构不会丢失；优点速度快，&lt;/p&gt;
&lt;p&gt;Innode 引擎：&lt;br&gt;
由，内存池，后台线程，磁盘文件三大部分组成，&lt;br&gt;
内存结构:&lt;br&gt;
redo log buffer（重做日志缓冲区) 保证 Mysql 数据库完整性的重要组成部分&lt;br&gt;
 buffer poll 缓冲池&lt;br&gt;
数据页缓存&lt;br&gt;
索引页缓存&lt;br&gt;
 change buffer 修改缓冲区（插入缓冲区），修改数据之后需要更新辅助索引，为了提高性能暂时先不更新，把要更新的操作放到缓冲区（change buffer）中。&lt;br&gt;
自适应哈希索引：完全由 mysql 管理，无法人工干预，&lt;br&gt;
磁盘结构：&lt;br&gt;
1・系统表空间：ibdata1&lt;br&gt;
 数据字典&lt;br&gt;
双写缓冲区&lt;br&gt;
修改缓冲区，内存中的 changebuffer 的映射&lt;br&gt;
回滚段，undolog&lt;br&gt;
2、用户表空间（每个表一个）&lt;br&gt;
默认情况下，每个表都对应一个 ibd 文件，就是用户表空间，用户的数据和索引都保存在用户表空间中&lt;br&gt;
 3、通用表空间&lt;br&gt;
默认没有这个文件的，在 mysql 中，使用 create tablespace 命令创建的表空间就通用表空间。&lt;br&gt;
4、回滚表空间&lt;br&gt;
默认是没有的，undo tablespace 默认是在系统表空间中，&lt;br&gt;
5、临时表空间，&lt;br&gt;
默认也是没有的，当使用临时表时才出现。&lt;br&gt;
6、redolog 重做日志文件&lt;br&gt;
就是 mysql 数据库数据完整性的重要保障文件。&lt;br&gt;
由一组文件组成：&lt;br&gt;
ib logfile0&lt;br&gt;
iblogfile1&lt;br&gt;
 两个文件循环使用，文件不会增长。&lt;/p&gt;
&lt;h2 id=&#34;二-innodb架构组织&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-innodb架构组织&#34;&gt;#&lt;/a&gt; 二、Innodb 架构组织&lt;/h2&gt;
&lt;h3 id=&#34;innodb磁盘文件结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#innodb磁盘文件结构&#34;&gt;#&lt;/a&gt; Innodb 磁盘文件结构&lt;/h3&gt;
&lt;p&gt;InnoDB 的主要的磁盘文件主要分为三大块：一是系统表空间，二是用户表空间，三是 redo 日志文件和归档文件&lt;br&gt;
三个表空间的区别，redo 是日志：保证 mysql 数据不丢失的重要环节，采用 WAL 顺序写实现，系统表空间和用户表空间采用的就是随机写，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;redolog 文件:&lt;br&gt;
 由一组文件组成，默认是两个文件:ib_logfile0 和 ib_logfile1, 循环写入，文件 1 写满之后写文件 2，文件 2 写满之后写文件 1，会覆盖之前的内容。&lt;/li&gt;
&lt;li&gt;系统表空间：&lt;br&gt;
文件中 ibdata1, 这就是系统表空间文件，其中包含&lt;br&gt;
 1. 数据字典&lt;br&gt;
 2. 双写缓冲区&lt;br&gt;
 3. 修改缓冲区&lt;br&gt;
 4. 回滚日志&lt;/li&gt;
&lt;li&gt;用户表空间：&lt;br&gt;
默认每个表对应一个表空间文件。*.ibd 文件，是可配置的，由 innodb_file_per_table 参数控制默认是 true. 其中包含表中的数据和索引信息。&lt;br&gt;
用户表空间结构：&lt;br&gt;
ibd 表空间文件&lt;br&gt;
分段： 段下面分成若干个区，每个区分成若干页（默认 16k）（数据读写以页为单位，页里面存储的数据行，行大小取决于表结构），数据页的大小可以通过参数 innode_page_size 来进行调整；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而通用表空间和临时表空间用的不多。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://blog-1259743669.cos.ap-chengdu.myqcloud.com/image-20230905225348775.png&#34; alt=&#34;image-20230905225348775&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-innodb的内存结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-innodb的内存结构&#34;&gt;#&lt;/a&gt; 1、Innodb 的内存结构&lt;/h4&gt;
&lt;p&gt;1、redolog buffer ：为了减少磁盘的 io，尽量将 redolog 相关的内容先写到缓冲区中，然后在合适的时机，将缓冲区的数据写到磁盘，合适的时机，就是 commit 操作，在 commit 之前，先把 redologBuffer 中的数据写入到 redolog 文件，如果写入成功那么 commit 成功，如果写入失败则 commit 失败。&lt;br&gt;
[innodb_flush_log_at_trx_commit] 参数 是 commiit 操作时写 redolog 的行为 ，默认值配置的是 1；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;属性值 为 0 时，事务提交时，不会对重做日志进行写入操作，而是等待主线程按时写入，每秒写入一次，&lt;/li&gt;
&lt;li&gt;当属性值为 1 时，事务提交时，会将重做日志写入文件系统缓存，并且调用文件系统的 fsync，将文件系统缓冲区的数据真正写入磁盘存储，确保不会出现数据丢失；（fsync 是操作系统的函数）&lt;/li&gt;
&lt;li&gt;当属性值为 2 时，事务提交时，也会将日志文件写入文件系统缓存，但是不会调用文件系统的 fsync , 而是让文件系统直接去判断何时将缓存写入磁盘。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-buffer-poll-缓存池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-buffer-poll-缓存池&#34;&gt;#&lt;/a&gt; 2、Buffer poll 缓存池&lt;/h4&gt;
&lt;p&gt;包含内容，数据页 (16k)，索引页，自适应 hash 索引，双写缓冲区，修改缓冲区（插入缓冲区）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据页：当对数据进行修改时，先把对应的数据页（16k) 放到内存中，然后再进行修改操作，此时内存数据页和磁盘数据页不一致，此时内存的数据页和磁盘的数据页不一致，内存的数据页就形成了脏页，一旦事务提交，就会记录到 redolog，记录了对数据的修改，保证数据安全。当查询数据时，以内存数据为准。&lt;/li&gt;
&lt;li&gt;索引页：一旦向表中插入数据或者修改数据时，把索引页放到内存中，在内存中进行修改，数据安全同样是由 redolog 保证的。&lt;/li&gt;
&lt;li&gt;自适应 hash 索引：Innodb 会根据分为频率和模式，为热点页建立哈希索引，来提高查询效率。不用我们自己维护。&lt;/li&gt;
&lt;li&gt;双写缓冲区：内存数据落盘时，需要使用双写缓冲区。&lt;/li&gt;
&lt;li&gt;修改缓冲区：也叫插入缓冲区，主要是对辅助索引修改时做的一个缓冲，辅助索引就是非主键索引。在早期版本中主要是针对插入操作。在新版本中，修改和删除页进行了缓冲&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-内存数据落盘重要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-内存数据落盘重要&#34;&gt;#&lt;/a&gt; 3、内存数据落盘（重要）&lt;/h4&gt;
&lt;p&gt;当要做增删改操作时，会对 Buffer pool 操作时， 先写 rdo log 到缓冲，然后进行落盘操作，&lt;br&gt;
checkPoint 触发时机:&lt;br&gt;
 假设如果重做日志可以无限增大，同时缓冲池页足够大，那么是不需要将缓冲池页的新版本刷回磁盘，因为当发生宕机时，完全可以通过重做日志来恢复整个数据库系统中的数据到宕机发生时刻。需要两个前提， 缓冲池中可以缓存数据库中的所有数据，重做日志可以无限增大。&lt;/p&gt;
&lt;p&gt;因此就有了 checkPoint，主要解决了 1、缩短数据库恢复时间，2、缓冲池不够用时，将脏页刷新到磁盘，3. 重做日志不可用时刷新脏页&lt;br&gt;
 checkPonint 分类：可分为 sharp checkPonint (强制) 和 fuzzy checkPonint (模糊) ：&lt;br&gt;
sharp checkPoint ：仅在关闭数据库的时候，将 BufferPool 中的脏页全部刷新到磁盘中，&lt;br&gt;
fuzzy checkPoint : 数据库正常运行时，在不同的时机，将部分脏页写入磁盘，仅刷新部分脏页到磁盘。避免一次性刷新全部脏页造成性能问题。&lt;br&gt;
有四个时机：&lt;br&gt;
1、Master Thread CheckPoint : 主线程定时将脏页写入磁盘，每秒将脏页写入，定时落盘&lt;br&gt;
 2、FLUSH_LRU_LIST CheckPoint 当 buffer pool 中脏页需要被淘汰时触发 checkpoint。&lt;br&gt;
3、Async/sync Flush CheckPoint ; 异步或者同步落盘操作。跟 redolog 相关的，&lt;br&gt;
4、Dirty Page too much CheckPoint ：buffer pool 中脏页过多时落盘，这个指标可配置&lt;/p&gt;
&lt;h4 id=&#34;4-脏页落盘过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-脏页落盘过程&#34;&gt;#&lt;/a&gt; 4、脏页落盘过程&lt;/h4&gt;
&lt;p&gt;双写机制：&lt;br&gt;
1、先把脏页写到 double write buffer (内存双写缓冲区)&lt;br&gt;
 2、把 double write buffer 的数据先写到系统表空间，&lt;br&gt;
3、把缓冲区的数据写入用户表空间中；&lt;br&gt;
4、如果写入系统表空间发生意外导致失败，可以使用用户表空间的数据页 + redolog 恢复数据。&lt;br&gt;
5、如果系统表空间写入成功，用户表空间写入失败，可以使用系统表空间备份的数据页来恢复用户表空间的数据页。&lt;br&gt;
使用双写机制，保证数据落盘过程万无一失。防止再写的过程中断电，造成数据丢失。&lt;/p&gt;
&lt;h1 id=&#34;七-mysql性能优化篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-mysql性能优化篇&#34;&gt;#&lt;/a&gt; 七、MYSQl 性能优化篇&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;首先需要使用慢查询日志，去获取查询时间比较长的 SQL 语句&lt;/li&gt;
&lt;li&gt;查看执行计划，查看有问题的 SQL 执行计划&lt;/li&gt;
&lt;li&gt;针对查询慢的 SQL 语句进行优化&lt;/li&gt;
&lt;li&gt;使用 SHOW profile 查看有问题的 SQL 性能使用情况&lt;/li&gt;
&lt;li&gt;调整操作系参数优化&lt;/li&gt;
&lt;li&gt;升级服务器硬件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要手动开启慢查询日志，需要设置阈值。&lt;/p&gt;
&lt;p&gt;#临时开启慢查询日志命令&lt;br&gt;
 set global slow_query_log=ON&lt;br&gt;
set global long_query_time=1&lt;br&gt;
# 数据库重启失效，长期开启需要去配置文件启动&lt;/p&gt;
&lt;h4 id=&#34;分析慢查询日志的工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析慢查询日志的工具&#34;&gt;#&lt;/a&gt; 分析慢查询日志的工具&lt;/h4&gt;
&lt;p&gt;explain 命令 查看执行计划&lt;/p&gt;
&lt;h4 id=&#34;查看执行执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看执行执行&#34;&gt;#&lt;/a&gt; 查看执行执行&lt;/h4&gt;
&lt;p&gt;使用 explain 命令 可以对 SQL 语句的执行计划进行分析&lt;/p&gt;
&lt;p&gt;id: SELECT 查询的标识符。每个 SELECT 都会自动分配一个唯一的标识符.&lt;br&gt;
select_type: SELECT 查询的类型.&lt;br&gt;
table: 查询的是哪个表&lt;br&gt;
 partitions: 匹配的分区&lt;br&gt;
 type: join 类型 查询类型&lt;br&gt;
 possible_keys: 此次查询中可能选用的索引&lt;br&gt;
 key: 此次查询中确切使用到的索引.&lt;br&gt;
ref: 哪个字段或常数与 key 一起被使用&lt;br&gt;
 rows: 显示此查询一共扫描了多少行。这个是一个估计值.&lt;br&gt;
filtered: 表示此查询条件所过滤的数据的百分比&lt;br&gt;
 extra: 额外的信息&lt;/p&gt;
&lt;h4 id=&#34;sql语句的优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql语句的优化&#34;&gt;#&lt;/a&gt; SQL 语句的优化&lt;/h4&gt;
&lt;h5 id=&#34;1-索引的优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-索引的优化&#34;&gt;#&lt;/a&gt; 1、索引的优化&lt;/h5&gt;
&lt;p&gt;为搜索字段、排序字段、select 查询列建立合适的索引。&lt;br&gt;
尽量建立组合索引，并注意顺序&lt;br&gt;
尽量使用覆盖索引&lt;br&gt;
索引长度尽可能短，短索引可以节省空间&lt;br&gt;
索引的更新不能频繁，更新频繁的数据不适合建索引&lt;/p&gt;
&lt;h5 id=&#34;2-limit优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-limit优化&#34;&gt;#&lt;/a&gt; 2、limit 优化&lt;/h5&gt;
&lt;p&gt;如果预计查询结果只有一个，建议使用 limit 1 可以停止全表扫描&lt;br&gt;
处理分页会使用到 limit 当翻页到后面的时候偏移量会非常大， limit offset size&lt;br&gt;
limit 优化问题，其实是 offset 的问题，他会导致 mysql 扫描大量不需要的行再抛弃掉。&lt;br&gt;
3、其他查询优化&lt;br&gt;
小表驱动大表，建议使用 left join 时，以小表关联大表，&lt;br&gt;
避免全表扫描&lt;br&gt;
 where 条件中尽量使用 Not in 语句建议使用 not exists&lt;br&gt;
 合理利用慢查询日志，explain 执行查询计划，show profile 查看 sql 执行时的资源使用情况&lt;/p&gt;
&lt;p&gt;4、服务器端优化&lt;br&gt;
缓冲区优化，设置足够大的 innodb_buffer_pool_size 将数据读取到内存中，&lt;br&gt;
降低磁盘写入次数，对于生产环境来说，部分日志是可以不用的，&lt;br&gt;
mysql 数据库配置优化 设置缓冲池内存大小&lt;br&gt;
日志落盘配置&lt;/p&gt;
&lt;p&gt;5、操作系统优化&lt;br&gt;
内核参数优化&lt;/p&gt;
&lt;p&gt;6、服务器硬件优化&lt;br&gt;
提升硬件设备，例如选择尽量高频率的内存（频率不能高于主板的支持）、提升网络带宽、使用 SSD 高&lt;br&gt;
速磁盘、提升 CPU 性能等。&lt;/p&gt;
&lt;h1 id=&#34;七-mysql集群篇&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-mysql集群篇&#34;&gt;#&lt;/a&gt; 七、MySQL 集群篇&lt;/h1&gt;
&lt;h2 id=&#34;主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制&#34;&gt;#&lt;/a&gt; 主从复制&lt;/h2&gt;
&lt;p&gt;2、binlog 和 relay 日志&lt;br&gt;
 bin log 记录了所有数据的更改，用于本机数据恢复和主从同步&lt;br&gt;
 relayz log ：中继日志&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mysql 主节点将 binlog 写入本地，从节点定时请求增量 binlog，主节点将 binlog 同步到从节点&lt;/li&gt;
&lt;li&gt;从节点单独进程会将 binlog 拷贝至本地 relaylog 中&lt;/li&gt;
&lt;li&gt;从节点定时重放 relay log。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;binlog 的日志模式：&lt;br&gt;
1.statement level 模式（日志有小概率无法同步的）&lt;br&gt;
2.rowlevel 模式 (比较耗存储性能)&lt;br&gt;
 3.mixed 模式（实际上就是前两种模式的结合，在 mixed 模式下）&lt;br&gt;
在配置文件中开启开启 binlog&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#binlog刷盘策略&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sync_binlog=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 ：存储引擎不进行binlog的刷新到磁盘，而由操作系统的文件系统控制缓存刷新。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1：每提交一次事务，存储引擎调用文件系统的sync操作进行一次缓存的刷新，这种方式最安全，但性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;能较低。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n：当提交的日志组=n时，存储引擎调用文件系统的sync操作进行一次缓存的刷新。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#需要备份的数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;binlog-do-db=hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#不需要备份的数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;binlog-ignore-db=mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#启动二进制文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;log-bin=mysql-bin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#服务器ID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server-id=132&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调整 binlog 日志模式&lt;br&gt;
 binlog 的三种格式： STATEMENT 、 ROW 、 MIXED 。&lt;/p&gt;
&lt;p&gt;查看 bin log 和 relay log 日志&lt;br&gt;
因为 binlog 日志文件：mysql-bin.000005 是二进制文件，没法用 vi 等打开，这时就需要 mysql 的自带的&lt;br&gt;
 mysqlbinlog 工具进行解码，执行： mysqlbinlog mysql-bin.000005 可以将二进制文件转为可阅读的&lt;br&gt;
 sql 语句。&lt;/p&gt;
&lt;p&gt;3、基于 binlog 主从复制&lt;br&gt;
关闭主从机器的防火墙&lt;/p&gt;
&lt;p&gt;主从复制存在一定延迟问题，并且只保证主机对外提供服务，只是在后台为主机进行备份。&lt;br&gt;
配置流程&lt;br&gt;
主服务器配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先做数据同步将主服务器的数据全量复制到从服务器&lt;/li&gt;
&lt;li&gt;主服务器上配置开启 binlog&lt;/li&gt;
&lt;li&gt;在主服务器上对复制数据的用户做授权操作&lt;/li&gt;
&lt;li&gt;使用 show master status 语句查看主服务器状态&lt;br&gt;
从服务器配置：&lt;/li&gt;
&lt;li&gt;配置从服务器的 server-id 参数，在 My.cnf 文件中配置&lt;/li&gt;
&lt;li&gt;如果从服务器使用的是虚拟机，并且是通过克隆得到的虚拟机，需要删除 auto.cnf 文件，重启服务器，会重新生成此文件&lt;/li&gt;
&lt;li&gt;重启 mysql 服务&lt;/li&gt;
&lt;li&gt;change master to 命令&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;读写分离&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写分离&#34;&gt;#&lt;/a&gt; 读写分离&lt;/h2&gt;
&lt;p&gt;学习书籍：&lt;/p&gt;
&lt;p&gt;《从根上理解 mysql》&lt;/p&gt;
&lt;p&gt;《小林 Coding》&lt;/p&gt;
</content>
        <category term="原理" />
        <category term="学习笔记" />
        <updated>2023-09-04T14:46:36.000Z</updated>
    </entry>
</feed>
